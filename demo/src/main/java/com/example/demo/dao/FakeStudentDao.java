package com.example.demo.dao;

import com.example.demo.model.Student;
import org.springframework.stereotype.Repository;

import javax.xml.crypto.Data;
import java.rmi.StubNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

//Repository is used with pair of Autowired
//So this class will be created automatically when the class with Autowired
//is built
//("name") can be added after @Repository if more than one class are implemented StudentDao.
@Repository
public class FakeStudentDao implements StudentDao{

    //As this is a fake database, use this Database to simulate real database
    private static List<Student> Database=new ArrayList<>();

   //Code->Implement method, then choose those methods
    @Override
    public List<Student> selectAllStudent() {
        //return student in the DB
        return Database;
    }

    @Override
    public int insertStudent(Student student) {
        //generate random uid to simulate real id
        UUID id=UUID.randomUUID();
        //id is generated by backend, to make sure that it is unique and key
        //student is passed from frontend, and not guarantee to be unique
        Database.add(new Student(id,student.getName()));
        return 1;
    }

    @Override
    public Optional<Student> selectStudentById(UUID id) {
        for (Student s: Database){
            if (s.getId().equals(id)){
                return Optional.of(s);
            }
        }

        return Optional.empty();
    }

    @Override
    public int updateStudent(Student student) {
        //check if student in database
        Optional<Student> optionalStudent=selectStudentById(student.getId());

        //if not student
        if (!optionalStudent.isPresent()){
            return -1;
        }

        //record student index
        int indexToUpdate=-1;
        for (int i=0; i<Database.size();i++){
            if (student.getId().equals(Database.get(i).getId())){
                indexToUpdate=i;
                break;
            }
        }

        Database.set(indexToUpdate,student);
        return 1;
    }

    @Override
    public int deleteStudentById(UUID id) {
        //check if student in database
        Optional<Student> optionalStudent=selectStudentById(id);

        //if not student
        if (!optionalStudent.isPresent()){
            return -1;
        }

        //del student with id

        Database.remove(optionalStudent.get());
        return 1;
    }
}
